name: SSH Deploy

on:
  push:
    branches: [ staging, feat/gh-ci ]
  pull_request:
    branches: [ staging ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Install PHP
      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1.6
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring
        env:
          update: true
      - name: Check PHP Version
        run: php -v
      # Prepare .env file 
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_APP_ENV: prod
          envkey_DB_NAME: ${{ secrets.DB_NAME }}
          envkey_DB_USER: ${{ secrets.DB_USER }}
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          envkey_DB_HOST: ${{ secrets.DB_HOST }}
          envkey_DB_PORT: ${{ secrets.DB_PORT }}
          envkey_DB_DRIVER: mysql
          file_name: .env
      # Prepare react .env file 
      - name: Make react envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_REACT_APP_API_ENDPOINT: ${{ secrets.REACT_APP_API_ENDPOINT }}
          file_name: react_app/.env
      # Install backend dependencies (Composer)
      - name: Validate compose -f docker-compose.prod.ymlr.json and compose -f docker-compose.prod.ymlr.lock
        run: compose -f docker-compose.prod.ymlr validate
      - name: Get compose -f docker-compose.prod.ymlr cache directory
        id: compose -f docker-compose.prod.ymlr-cache
        run: echo "::set-output name=dir::$(compose -f docker-compose.prod.ymlr config cache-files-dir)"
      - name: Cache compose -f docker-compose.prod.ymlr dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.compose -f docker-compose.prod.ymlr-cache.outputs.dir }}
          key: ${{ runner.os }}-compose -f docker-compose.prod.ymlr-${{ hashFiles('**/compose -f docker-compose.prod.ymlr.lock') }}
          restore-keys: ${{ runner.os }}-compose -f docker-compose.prod.ymlr-
      - name: Install Composer dependencies
        run: compose -f docker-compose.prod.ymlr install --no-dev
      # Install NPM dependencies
      - name: Install NPM dependencies
        run: cd react_app && npm install && npm run build
      # Copying files and artifacts via SSH
      - name: Copying files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ''
          source: "./"
          target: ${{ secrets.REMOTE_TARGET }}
      # Check files on production
      - name: Check files on production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ''
          script: |
            cd ${{ secrets.REMOTE_TARGET }}
            pwd
            ls -al 
      # Run commands on production
      - name: Executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ''
          script: |
            cd ${{ secrets.REMOTE_TARGET }}
            make stop-prod
            make up-prod
            sleep 3
            make drush "updb -y" && make drush "cim -y" && make drush cr
            cd react_app
            docker compose -f docker-compose.prod.yml down 
            docker compose -f docker-compose.prod.yml up -d 