name: SSH Deploy

on:
  push:
    branches: [ staging, feat/gh-ci ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Install PHP
      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4.13
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring
        env:
          update: true
      - name: Check PHP Version
        run: php -v
      # Prepare .env file 
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_APP_ENV: prod
          envkey_DB_NAME: ${{ secrets.DB_NAME }}
          envkey_DB_USER: ${{ secrets.DB_USER }}
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          envkey_DB_HOST: ${{ secrets.DB_HOST }}
          envkey_DB_PORT: ${{ secrets.DB_PORT }}
          envkey_DB_DRIVER: mysql
          file_name: .env
      # Prepare react .env file 
      - name: Make react envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_REACT_APP_API_ENDPOINT: ${{ secrets.REACT_APP_API_ENDPOINT }}
          file_name: react_app/.env
      # Install backend dependencies (Composer)
      - name: Validate composer.json and composer.lock
        run: composer validate
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Install Composer dependencies
        run: composer install --no-dev
      # Install NPM dependencies
      - name: Install NPM dependencies
        run: cd react_app && npm install && npm run build
      # Remove old folders
      - name: Executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ''
          script: |
            cd ${{ secrets.REMOTE_TARGET }}
            rm -rf config
            rm -rf vendor
            rm -rf web/core
            rm -rf web/modules
            rm -rf themes
      # Copying files and artifacts via SSH
      - name: Copying files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ''
          source: "./"
          target: ${{ secrets.REMOTE_TARGET }}
      # Check files on production
      - name: Check files on production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ''
          script: |
            cd ${{ secrets.REMOTE_TARGET }}
            pwd
            ls -al 
      # Run commands on production
      - name: Executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ''
          script: |
            cd ${{ secrets.REMOTE_TARGET }}
            make stop-prod
            make up-prod
            sleep 3
            docker compose exec -it lvdd-pp-php drush updb -y
            docker compose exec -it lvdd-pp-php drush cim -y
            docker compose exec -it lvdd-pp-php drush cr
            cd react_app
            docker compose -f docker-compose.prod.yml down 
            docker compose -f docker-compose.prod.yml up -d 