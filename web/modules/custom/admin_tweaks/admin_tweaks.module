<?php

/**
 * @file
 * Contains admin_tweaks.module.
 */

use Drupal\admin_tweaks\Access\CustomFieldConfigAccessControlHandler;
use Drupal\admin_tweaks\Access\CustomMenuLinkContentAccessControlHandler;
use Drupal\admin_tweaks\ToTimeSlicesServiceInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeForm;

/**
 * Implements hook_help().
 */
function admin_tweaks_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the admin_tweaks module.
    case 'help.page.admin_tweaks':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Changes some aspects of the admin UI and behaviors') . '</p>';
      return $output;

    default:
  }
}

function admin_tweaks_preprocess_page(&$variables) {
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $variables['#attached']['library'][] = 'admin_tweaks/admin_tweaks';
   }
}

function admin_tweaks_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (get_class($form_state->getFormObject()) === 'Drupal\node\NodeForm') {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'admin_tweaks_node_form_submit';
      }
    }
  }
}

function admin_tweaks_node_form_submit($form, FormStateInterface $form_state) {
  /** @var NodeForm $form_object */
  $form_object = $form_state->getFormObject();
  $node = $form_object->getEntity();
  $type = $node->type->entity->get('type');

  // force ignoring destination (?destination=...)
  $form_state->setIgnoreDestination();

  $params['query'] = [
    'type' => $type,
  ];
  $url = Url::fromRoute('system.admin_content');
  $url->setOptions($params);
  $form_state->setRedirectUrl($url);
}

function admin_tweaks_entity_type_alter(array &$entity_types) {
  /** @var Drupal\Core\Entity\ContentEntityType $menu_link_content */
  $menu_link_content = $entity_types['menu_link_content'];
  $menu_link_content->setHandlerClass('access', CustomMenuLinkContentAccessControlHandler::class);
  /** @var Drupal\Core\Entity\ContentEntityType $field_storage_config */
  $field_storage_config = $entity_types['field_storage_config'];
  $field_storage_config->setHandlerClass('access', CustomFieldConfigAccessControlHandler::class);
}

function admin_tweaks_entity_presave (EntityInterface $entity) {
  /** @var Node $entity */
  if ($entity->getEntityTypeId() === 'node' && $entity->getType() == 'recipe') {
    /** @var ToTimeSlicesServiceInterface $to_time_slices */
    $to_time_slices = \Drupal::service('admin_tweaks.to_time_slices');
    $resting_time = $entity->field_resting_time->getValue();
    $min_resting_time = isset($resting_time[0]) ? $resting_time[0]['value'] : 0;
    $max_resting_time = isset($resting_time[1]) ? $resting_time[1]['value'] : $min_resting_time;
    $resting_time_slices = $to_time_slices->fromIntegerRange(
      $min_resting_time, 
      $max_resting_time, 
      _get_field_values($entity, 'field_resting_time_slice')
    );
    $entity->set('field_resting_time_slice', array_keys($resting_time_slices));
    
    $preparation_time = $entity->field_preparation_time->getValue();
    $cooking_time = $entity->field_cooking_time->getValue();
    $min_cooking_time = isset($preparation_time[0]) ? $preparation_time[0]['value'] : 0;
    $min_preparation_time = isset($preparation_time[0]) ? $preparation_time[0]['value'] : 0;
    $max_cooking_time = isset($cooking_time[1]) ? $cooking_time[1]['value'] : $min_cooking_time;
    $max_preparation_time = isset($preparation_time[1]) ? $preparation_time[1]['value'] : $min_preparation_time;
    $production_time_slices = $to_time_slices->fromIntegerRange(
      $min_cooking_time + $min_preparation_time,
      $max_cooking_time + $max_preparation_time,
      _get_field_values($entity, 'field_production_time_slice')
    );
    $entity->set('field_production_time_slice', array_keys($production_time_slices));
  }
  if ($entity->getEntityTypeId() === 'node' && $entity->getType() == 'ingredient' && !$entity->id()) {
    $entity->setOwnerId(\Drupal::currentUser()->id());
  }
}

function _get_field_values (EntityInterface $entity, string $field_name) {
  return $entity->$field_name->getFieldDefinition()
    ->getFieldStorageDefinition()
    ->getOptionsProvider('value', $entity->$field_name->getEntity())->getPossibleOptions();
}